package dbconnecton;import org.apache.logging.log4j.Logger;import org.jetbrains.annotations.NotNull;import org.jetbrains.annotations.Nullable;import java.sql.Connection;import java.sql.SQLException;@SuppressWarnings("WeakerAccess")public interface ReusableConnection extends ConnectionWrapper {    /**     * Returns connection queue this ReusableConnection resides in.     * @return Connection queue reference. If {@code null}, connections are terminated instead of returning to pool.     */    @NotNull DestructibleBlockingQueue<Connection> getConnectionQueue();    static ReusableConnection create(@NotNull Connection connection,                                     @NotNull DestructibleBlockingQueue<Connection> queue, @Nullable Logger logger) {        try {            connection.setAutoCommit(true);        } catch (SQLException e) {            throw new RuntimeException("Cannot turn on autoCommit", e);        }        return new ReusableConnection() {            final Logger log = (logger == null)? new DummyLogger() : logger;            @Override            @NotNull public DestructibleBlockingQueue<Connection> getConnectionQueue() {                return queue;            }            @Override            @NotNull public Connection toSrc() {                return connection;            }            @Override            public Logger getLogger() {                return log;            }        };    }    /**     * Returns connection to the pool if the queue exists, otherwise closes it     * @throws SQLException     */    @Override    default void close() throws SQLException {        if (toSrc().isClosed()) {            throw new SQLException("Attempting to close closed connection");        }        if (toSrc().isReadOnly())            toSrc().setReadOnly(false);        if (getConnectionQueue().isDestroyed()) {            getLogger().trace("Connection {} terminating: pool closed", this);            toSrc().close();            return;        }        if (! getConnectionQueue().offer(this))            throw new SQLException("Error returning connection to the pool");        getLogger().trace("Returning connection {} to the pool", this);    }    Logger getLogger();}